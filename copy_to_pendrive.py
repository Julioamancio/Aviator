#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para Copiar Credenciais para Pen Drive - Aviator Bot
"""

import json
import shutil
from pathlib import Path

def main():
    print("="*60)
    print("    COPIAR CREDENCIAIS PARA PEN DRIVE - AVIATOR BOT")
    print("="*60)
    print()
    
    # Definir caminhos
    project_root = Path(__file__).parent
    local_aviator_folder = project_root / "AVIATOR"
    local_credentials_file = local_aviator_folder / "credentials.json"
    
    external_aviator_folder = Path("E:/AVIATOR")
    external_credentials_file = external_aviator_folder / "credentials.json"
    
    # Verificar se pen drive est√° dispon√≠vel
    if not external_aviator_folder.parent.exists():
        print("‚ùå Pen drive E:\ n√£o foi detectado!")
        print("üì± Conecte o pen drive na porta E:\ e tente novamente.")
        return False
    
    # Verificar se credenciais locais existem
    if not local_credentials_file.exists():
        print("‚ùå Arquivo de credenciais local n√£o encontrado!")
        print(f"üìÅ Esperado em: {local_credentials_file}")
        print("üîß Execute primeiro: python configure_credentials.py")
        return False
    
    print("‚úÖ Pen drive E:\ detectado!")
    print(f"üìÅ Credenciais locais encontradas: {local_credentials_file}")
    print()
    
    # Mostrar informa√ß√µes das credenciais
    try:
        with open(local_credentials_file, 'r', encoding='utf-8') as f:
            credentials = json.load(f)
        
        username = credentials.get('username', 'N√£o configurado')
        if username == 'seu_usuario_aqui':
            username = 'N√£o configurado'
        
        print("üìã INFORMA√á√ïES DAS CREDENCIAIS:")
        print("-" * 40)
        print(f"Usu√°rio: {username}")
        print(f"Site: {credentials.get('site_config', {}).get('site_url', 'N/A')}")
        print(f"Estrat√©gia: {credentials.get('betting_strategy', {}).get('strategy_type', 'N/A')}")
        print(f"Valor da aposta: R$ {credentials.get('betting_strategy', {}).get('amount', 0):.2f}")
        print()
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao ler credenciais: {e}")
        print("Continuando com a c√≥pia...")
        print()
    
    # Verificar se j√° existe no pen drive
    if external_credentials_file.exists():
        print("‚ö†Ô∏è J√° existem credenciais no pen drive!")
        print(f"üìÅ Localiza√ß√£o: {external_credentials_file}")
        
        overwrite = input("Deseja sobrescrever as credenciais existentes? (s/N): ").lower().strip()
        if overwrite != 's':
            print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
            return False
        print()
    
    # Criar pasta no pen drive
    try:
        external_aviator_folder.mkdir(exist_ok=True, parents=True)
        print(f"üìÇ Pasta criada no pen drive: {external_aviator_folder}")
    except Exception as e:
        print(f"‚ùå Erro ao criar pasta no pen drive: {e}")
        return False
    
    # Copiar arquivo de credenciais
    try:
        shutil.copy2(local_credentials_file, external_credentials_file)
        print(f"‚úÖ Credenciais copiadas com sucesso!")
        print(f"üìÅ De: {local_credentials_file}")
        print(f"üì± Para: {external_credentials_file}")
    except Exception as e:
        print(f"‚ùå Erro ao copiar credenciais: {e}")
        return False
    
    # Copiar README tamb√©m
    local_readme = local_aviator_folder / "README.md"
    external_readme = external_aviator_folder / "README.md"
    
    if local_readme.exists():
        try:
            shutil.copy2(local_readme, external_readme)
            print(f"üìñ README copiado: {external_readme}")
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso: Erro ao copiar README: {e}")
    
    # Criar arquivo de informa√ß√µes no pen drive
    info_file = external_aviator_folder / "info.txt"
    try:
        with open(info_file, 'w', encoding='utf-8') as f:
            f.write("AVIATOR BOT - CREDENCIAIS SEGURAS\n")
            f.write("=" * 40 + "\n\n")
            f.write(f"Data da c√≥pia: {Path().cwd()}\n")
            f.write(f"Origem: {local_credentials_file}\n")
            f.write(f"Destino: {external_credentials_file}\n\n")
            f.write("IMPORTANTE:\n")
            f.write("- Mantenha este pen drive em local seguro\n")
            f.write("- N√£o compartilhe as credenciais\n")
            f.write("- Fa√ßa backup regularmente\n")
            f.write("- O bot usar√° automaticamente estas credenciais\n\n")
            f.write("Para usar:\n")
            f.write("1. Conecte o pen drive na porta E:\\\n")
            f.write("2. Execute o bot normalmente\n")
            f.write("3. O sistema detectar√° automaticamente as credenciais\n")
        
        print(f"üìÑ Arquivo de informa√ß√µes criado: {info_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è Aviso: Erro ao criar arquivo de informa√ß√µes: {e}")
    
    print()
    print("üéâ C√ìPIA CONCLU√çDA COM SUCESSO!")
    print("=" * 60)
    print(f"üì± Credenciais no pen drive: {external_aviator_folder}")
    print("üîí Mantenha o pen drive em local seguro")
    print("üöÄ O bot usar√° automaticamente as credenciais do pen drive")
    print()
    print("üí° DICAS:")
    print("- Conecte o pen drive antes de iniciar o bot")
    print("- Se o pen drive n√£o estiver conectado, o bot usar√° as credenciais locais")
    print("- Mantenha sempre um backup das credenciais")
    print("- Atualize as credenciais no pen drive quando necess√°rio")
    print()
    
    return True

def verify_pendrive():
    """Verificar se o pen drive est√° conectado e tem as credenciais"""
    external_aviator_folder = Path("E:/AVIATOR")
    external_credentials_file = external_aviator_folder / "credentials.json"
    
    print("üîç VERIFICA√á√ÉO DO PEN DRIVE")
    print("-" * 30)
    
    if not external_aviator_folder.parent.exists():
        print("‚ùå Pen drive E:\ n√£o detectado")
        return False
    
    print("‚úÖ Pen drive E:\ detectado")
    
    if not external_aviator_folder.exists():
        print("‚ùå Pasta AVIATOR n√£o encontrada no pen drive")
        return False
    
    print("‚úÖ Pasta AVIATOR encontrada")
    
    if not external_credentials_file.exists():
        print("‚ùå Arquivo de credenciais n√£o encontrado no pen drive")
        return False
    
    print("‚úÖ Arquivo de credenciais encontrado")
    
    try:
        with open(external_credentials_file, 'r', encoding='utf-8') as f:
            credentials = json.load(f)
        
        username = credentials.get('username', '')
        if username and username != 'seu_usuario_aqui':
            print(f"‚úÖ Credenciais configuradas para: {username}")
            return True
        else:
            print("‚ö†Ô∏è Credenciais n√£o configuradas no pen drive")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao ler credenciais: {e}")
        return False

if __name__ == "__main__":
    try:
        import sys
        
        if len(sys.argv) > 1 and sys.argv[1] == "--verify":
            verify_pendrive()
        else:
            main()
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")